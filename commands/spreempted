#!/usr/bin/env python
#
# Determine if one or more jobs were likely preempted.
#

import sys
import os
import time
import argparse
import subprocess

class JobRecord(object):

    def __init__(self, jobRecStr):
        self.properties = dict()
        self._notes = ''
        while jobRecStr:
            (key, dummy, rest) = jobRecStr.partition('=')
            # Got the key, now the value:
            i = 0
            while i < len(rest):
                while i < len(rest) and rest[i] != ' ': i = i + 1
                if  i < len(rest) and rest[i] == ' ':
                    # Look ahead -- [[:alpha:]]= ?
                    j = i + 1
                    while j < len(rest) and rest[j].isalpha(): j = j + 1
                    if j < len(rest) and rest[j] == '=':
                        # Got it:
                        self.properties[key] = rest[:i]
                        jobRecStr = rest[i+1:]
                        i = -1
                        break
                    i = j
            if i >= 0:
                self.properties[key] = rest
                jobRecStr = ''

            # Add synthetic properties:
            if 'StartTime' in self.properties and 'EndTime' in self.properties:
                startTime = self.timeValueForKey('StartTime')
                endTime = self.timeValueForKey('EndTime')
                actualWallTime = (endTime - startTime) / 60.0
                self.properties['ActualWallTime'] = '{:.2f}'.format(actualWallTime)
                if 'TimeLimit' in self.properties:
                    self.properties['WallTimePctOfLimit'] = '{:.2f}%'.format(100.0 * actualWallTime / float(self.properties['TimeLimit']))

    def __str__(self):
        outStr = '{:s} ({:s}) {{\n'.format(self.fullJobId(), self.notes())
        for key,value in self.properties.iteritems():
            outStr = outStr + '  {:s}: "{:s}"\n'.format(key, str(value))
        outStr = outStr + '}\n'
        return outStr

    def fullJobId(self):
        jobId = self.properties['JobId']
        if 'ArrayJobId' in self.properties and len(self.properties['ArrayJobId']) > 0:
            jobId = jobId + '_' + self.properties['ArrayJobId']
        return jobId

    def actualWallTime(self):
        startTime = self.timeValueForKey('StartTime')
        endTime = self.timeValueForKey('EndTime')
        return (endTime - startTime)

    def notes(self):
        return self._notes
    def setNotes(self, notes):
        self._notes = notes

    def hasKey(self, key):
        return (key in self.properties)

    def valueForKey(self, key, default = None):
        return (self.properties[key] if key in self.properties else default)

    def intValueForKey(self, key):
        if key in self.properties:
            return int(self.properties[key])
        raise NameError("key '{:s}' is not defined".format(key))

    def timeValueForKey(self, key):
        if key in self.properties:
            return time.mktime(time.strptime(self.properties[key], '%Y-%m-%dT%H:%M:%S'))
        raise NameError("key '{:s}' is not defined".format(key))



cli_parser = argparse.ArgumentParser(description='Determine if jobs were preempted')
cli_parser.add_argument(
                '--verbose', '-v',
                dest='isVerbose',
                action='store_true',
                default=False,
                help='Emit additional information'
            )
cli_parser.add_argument(
                '--quiet', '-q',
                dest='isQuiet',
                action='store_true',
                default=False,
                help='Do not summarize preemptions, just return non-zero result code if any were preempted'
            )
cli_parser.add_argument(
                '--show-jobid', '-s',
                dest='shouldShowJobId',
                action='store_true',
                default=False,
                help='Always prefix output lines with job id'
            )
cli_parser.add_argument(
                '--jobid', '-j',
                metavar='<job-id>',
                action='append',
                dest='jobIds',
                help='Slurm job id to check; can be used multiple times to check more than one job.  For array jobs, use the syntax #_# for individual array indices'
            )
cli_args = cli_parser.parse_args()

if not cli_args.jobIds or len(cli_args.jobIds) == 0:
    sys.stderr.write('ERROR:  no job ids provided\n')
    sys.exit(1)

#
# Turn the job ids into a set:
#
jobIds = set(cli_args.jobIds)

#
# Get base job ids (sans array task id):
#
def baseJobId(jobId):
    if '_' in jobId:
        return jobId[:jobId.find('_')]
    return jobId
baseJobIds = set([(j[:j.find('_')] if '_' in j else j) for j in jobIds])

#
# Scan the completion log:
#
with open('/var/log/slurm/jobcomp/completion.log', 'r') as log_file:
    foundJobs = []
    line = log_file.readline()
    lastJobId=''
    while len(jobIds) > 0 and line:
        if line.startswith('JobId='):
            (jobId, dummy1, dummy2) = line[6:].partition(' ')
            if jobId in baseJobIds:
                # At this point, let's parse the completion line:
                theJob = JobRecord(line.strip())

                task_id = theJob.valueForKey('ArrayJobId', None)
                if task_id is not None:
                    #
                    # For an array job, we want to check this job if the
                    # overarching job id was provided OR if the exact
                    # job id + task was provided:
                    #
                    if jobId in jobIds or (jobId + '_' + task_id) in jobIds:
                        try:
                            jobIds.remove(jobId + '_' + task_id)
                        except:
                            pass
                        shouldCheck = True
                else:
                    shouldCheck = True

                if shouldCheck and theJob.valueForKey('Partition', '') == 'standard':
                    shouldDisplay = False
                    if theJob.valueForKey('JobState', '') == 'PREEMPTED':
                        shouldDisplay = True
                        theJob.setNotes('preempted, reached grace period limit')
                    elif theJob.valueForKey('JobState', '') != 'COMPLETED':
                        #
                        # Grab the TimeLimit, StartTime, and EndTime, then calculate
                        # the difference between actual and submitted EndTime:
                        #
                        timeLimit = int(theJob.valueForKey('TimeLimit', -1))
                        startTime = theJob.timeValueForKey('StartTime')
                        endTime = theJob.timeValueForKey('EndTime')
                        deltaTime = abs(endTime - (startTime + timeLimit * 60))

                        # If deltaTime is more than 5 minutes, the job was preempted:
                        shouldDisplay = (deltaTime >= 5 * 60)
                        if shouldDisplay:
                            theJob.setNotes('preempted, did not reach grace period limit')

                    if shouldDisplay:
                        foundJobs.append(theJob)
            if len(lastJobId) > 0 and jobId != lastJobId:
                if lastJobId in jobIds: jobIds.remove(lastJobId)
                if lastJobId in baseJobIds: baseJobIds.remove(lastJobId)
            lastJobId = jobId

        line = log_file.readline()

# Display what we found:
if len(foundJobs) > 0:
    if cli_args.isVerbose:
        for aJob in foundJobs:
            sys.stdout.write(str(aJob))
    elif not cli_args.isQuiet:
        if len(foundJobs) > 1 or cli_args.shouldShowJobId:
            out_format = '{0}: {1}\n'
        else:
            out_format = '{1}\n'
        for aJob in foundJobs:
            sys.stdout.write(out_format.format(aJob.fullJobId(), aJob.notes()))
    sys.exit(1)

sys.exit(0)
