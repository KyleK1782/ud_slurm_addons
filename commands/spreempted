#!/usr/bin/env python
#
# Determine if one or more jobs were likely preempted.
#

import sys
import os
import time
import argparse
import subprocess

class JobRecord(object):

    def __init__(self, headerStr, jobSummaryStr):
        self.properties = dict()
        self._notes = ''

        self.properties = dict(zip(headerStr.split('|'), jobSummaryStr.split('|')))

        # Add synthetic properties:
        if 'Start' in self.properties and 'End' in self.properties:
            startTime = self.timeValueForKey('Start')
            endTime = self.timeValueForKey('End')
            actualWallTime = (endTime - startTime)
            seconds = actualWallTime
            if seconds >= 86400.0:
                days = int(seconds / 86400.0)
                seconds = seconds - (86400 * days)
            else:
                days = 0
            if seconds >= 3600.0:
                hours = int(seconds / 3600.0)
                seconds = seconds - (3600 * hours)
            else:
                hours = 0
            if seconds >= 60.0:
                minutes = int(seconds / 60.0)
                seconds = seconds - (60 * minutes)
            else:
                minutes = 0
            seconds = int(seconds)

            if days > 0:
                self.properties['ActualWallTime'] = '{:d}-{:02d}:{:02d}:{:02d}'.format(days,hours,minutes,seconds)
            else:
                self.properties['ActualWallTime'] = '{:02d}:{:02d}:{:02d}'.format(hours,minutes,seconds)
            if 'Timelimit' in self.properties:
                if self.properties['Timelimit'] == 'UNLIMITED':
                    self.properties['WallTimePctOfLimit'] = '0.00%'
                else:
                    self.properties['WallTimePctOfLimit'] = '{:.2f}%'.format(
                                        100.0 * actualWallTime / self.durationValueForKey('Timelimit')
                                )

    def toStr(self, shouldSortKeys = False):
        outStr = '{:s} ({:s}) {{\n'.format(self.properties['JobID'], self.notes())
        if shouldSortKeys:
            keys = self.properties.keys()
            keys.sort()
            for key in keys:
                outStr = outStr + '  {:s}: "{:s}"\n'.format(key, str(self.properties[key]))
        else:
            for key, value in self.properties.iteritems():
                outStr = outStr + '  {:s}: "{:s}"\n'.format(key, str(value))
        outStr = outStr + '}\n'
        return outStr

    def checkState(self, keywords):
        for keyword in keywords:
            if keyword in self.properties['State']: return True
        return False

    def jobId(self):
        return self.properties['JobID']

    def isArrayJob(self):
        return self.properties['JobID'] != self.properties['JobIDRaw']

    def notes(self):
        return self._notes
    def setNotes(self, notes):
        self._notes = notes

    def hasKey(self, key):
        return (key in self.properties)

    def valueForKey(self, key, default = None):
        return (self.properties[key] if key in self.properties else default)

    def intValueForKey(self, key):
        if key in self.properties:
            return int(self.properties[key])
        raise NameError("key '{:s}' is not defined".format(key))

    def durationValueForKey(self, key):
        if key in self.properties:
            val = self.properties[key]
            if val == 'UNLIMITED': return -1

            if '-' in val:
                (days, dummy, hours) = val.partition('-')
            else:
                days = '0'
                hours = val
            pieces = hours.split(':')
            if len(pieces) == 3:
                return float(pieces[2]) + 60.0 * (60.0 * (24.0 * float(days) + float(pieces[0])) + float(pieces[1]))
            raise ValueError("'{:s}' is not a valid duration".format(self.properties[key]))
        raise NameError("key '{:s}' is not defined".format(key))

    def timeValueForKey(self, key):
        if key in self.properties:
            return time.mktime(time.strptime(self.properties[key], '%Y-%m-%dT%H:%M:%S'))
        raise NameError("key '{:s}' is not defined".format(key))



cli_parser = argparse.ArgumentParser(description='Determine if jobs were preempted')
cli_parser.add_argument(
                '--verbose', '-v',
                dest='isVerbose',
                action='store_true',
                default=False,
                help='Emit additional information'
            )
cli_parser.add_argument(
                '--quiet', '-q',
                dest='isQuiet',
                action='store_true',
                default=False,
                help='Do not summarize preemptions, just return non-zero result code if any were preempted'
            )
cli_parser.add_argument(
                '--show-jobid', '-s',
                dest='shouldShowJobId',
                action='store_true',
                default=False,
                help='Always prefix output lines with job id'
            )
cli_parser.add_argument(
                '--sort-properties',
                dest='shouldSortProperties',
                action='store_true',
                default=False,
                help='For verbose output, show properties in alphabetized order'
            )
cli_parser.add_argument(
                '--jobid', '-j',
                metavar='<job-id>{,<job-id>..}',
                action='append',
                dest='jobIds',
                help='Slurm job id to check; can be used multiple times to check more than one job.  For array jobs, use the syntax #_# for individual array indices'
            )
cli_args = cli_parser.parse_args()

if not cli_args.jobIds or len(cli_args.jobIds) == 0:
    sys.stderr.write('ERROR:  no job ids provided\n')
    sys.exit(1)

#
# Turn the job ids into a set, splitting any comma-delimited
# values into multiple values:
#
jobIds = []
for jobId in cli_args.jobIds:
    if ',' in jobId:
        jobIds.extend(jobId.split(','))
    else:
        jobIds.append(jobId)
jobIds = set(jobIds)

#
# Grab header and summary lines for each job id
# from sacct:
#
foundJobs = []
for jobId in jobIds:
    try:
        acctInfo = subprocess.check_output(['sacct', '--parsable2', '--format=ALL', '--job=' + jobId])
        if acctInfo:
            lines = acctInfo.split('\n')
            if len(lines) >= 2:
                theJob = JobRecord(lines[0], lines[1])
                if theJob.valueForKey('Partition', '') == 'standard':
                    shouldDisplay = False
                    if theJob.checkState(['PREEMPTED']):
                        shouldDisplay = True
                        theJob.setNotes('preempted, reached grace period limit')
                    elif not theJob.checkState(['COMPLETED', 'CANCELLED']):
                        #
                        # Grab the TimeLimit, StartTime, and EndTime, then calculate
                        # the difference between actual and submitted EndTime:
                        #
                        timeLimit = theJob.durationValueForKey('Timelimit')
                        startTime = theJob.timeValueForKey('Start')
                        endTime = theJob.timeValueForKey('End')
                        deltaTime = abs(endTime - (startTime + timeLimit))

                        # If deltaTime is more than 5 minutes, the job was preempted:
                        shouldDisplay = (deltaTime >= 5 * 60)
                        if shouldDisplay:
                            theJob.setNotes('preempted, did not reach grace period limit')

                    if shouldDisplay:
                        foundJobs.append(theJob)
    except Exception as E:
        print str(E)

# Display what we found:
if len(foundJobs) > 0:
    if cli_args.isVerbose:
        for aJob in foundJobs:
            sys.stdout.write(aJob.toStr(cli_args.shouldSortProperties))
    elif not cli_args.isQuiet:
        if len(foundJobs) > 1 or cli_args.shouldShowJobId:
            out_format = '{0}: {1}\n'
        else:
            out_format = '{1}\n'
        for aJob in foundJobs:
            sys.stdout.write(out_format.format(aJob.jobId(), aJob.notes()))
    sys.exit(1)

sys.exit(0)
